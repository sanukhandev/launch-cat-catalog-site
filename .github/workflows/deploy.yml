name: Deploy to cPanel via SSH

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      HOST: ${{ secrets.CPANEL_HOST }}
      USER: ${{ secrets.CPANEL_USERNAME }}
      PASS: ${{ secrets.CPANEL_PASSWORD }}
      PORT: ${{ secrets.CPANEL_PORT || 22 }}
      TARGET_DIR: ${{ secrets.CPANEL_TARGET_DIR || 'public_html/launchtech.co.in' }}
      WEBSITE_URL: ${{ secrets.WEBSITE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          PUBLIC_URL: "./"

      - name: Create deployment archive
        run: |
          cd build
          # Remove admin directory if it exists in build to prevent conflicts
          rm -rf admin 2>/dev/null || true
          tar -czf ../deploy.tar.gz .
          cd ..

      # --- SSH/SCP using OpenSSH with KEX override (password auth) ---
      - name: Install sshpass (for password auth)
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends sshpass

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Upload deploy.tar.gz to server (atomic temp path)
        run: |
          REMOTE_BASENAME="deploy_tmp_$(date +%s)"
          echo "REMOTE_BASENAME=$REMOTE_BASENAME" >> $GITHUB_ENV
          # Upload into remote $HOME; ~ expands on remote side
          sshpass -p "$PASS" scp -P "$PORT" \
            -o KexAlgorithms=+diffie-hellman-group-exchange-sha256 \
            deploy.tar.gz "$USER@$HOST:~/${REMOTE_BASENAME}.tar.gz"

      - name: Run remote deploy (direct replacement)
        run: |
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o KexAlgorithms=+diffie-hellman-group-exchange-sha256 \
            "$USER@$HOST" "export TARGET_DIR='${TARGET_DIR}'; export REMOTE_BASENAME='${REMOTE_BASENAME}'; bash -s" << 'REMOTE'
          set -euo pipefail

          : "${TARGET_DIR:?TARGET_DIR missing}"
          : "${REMOTE_BASENAME:?REMOTE_BASENAME missing}"

          # Build absolute path to uploaded tar (no tilde issues)
          REMOTE_TMP="$HOME/${REMOTE_BASENAME}.tar.gz"

          # Make sure target dir exists
          mkdir -p "$TARGET_DIR"
          cd "$TARGET_DIR"

          echo "== Bring in new build =="
          mv "$REMOTE_TMP" ./deploy.tar.gz

          echo "== Remove old files (preserve admin and system dirs) =="
          # Remove all top-level files except .htaccess and the new tar
          find . -maxdepth 1 -type f \
            -not -name ".htaccess" \
            -not -name "deploy.tar.gz" \
            -delete

          # Remove old directories except admin and system directories
          find . -maxdepth 1 -type d \
            -not -name "." -not -name ".." \
            -not -name "admin" \
            -not -name "cgi-bin" -not -name "_logs" -not -name "_errors" \
            -exec rm -rf {} +

          echo "== Extract new build =="
          tar -xzf deploy.tar.gz

          echo "== Cleanup =="
          rm -f deploy.tar.gz

          echo "== Set permissions =="
          # Files - ensure all web files are readable
          find . -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.json" -o -name "*.txt" -o -name "*.xml" -o -name "*.ico" -o -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" -o -name "*.woff*" -o -name "*.ttf" -o -name "*.map" -o -name "*.webmanifest" -o -name ".htaccess" \) -exec chmod 644 {} \;
          # Dirs - ensure all directories are accessible
          find . -type d -exec chmod 755 {} \;

          echo "Permissions set for all files and directories"

          echo "Deployment completed successfully at $(date)"
          REMOTE

      - name: Verify deployment
        run: |
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o KexAlgorithms=+diffie-hellman-group-exchange-sha256 \
            "$USER@$HOST" "export TARGET_DIR='${TARGET_DIR}'; bash -s" << 'REMOTE'
          set -euo pipefail
          : "${TARGET_DIR:?TARGET_DIR missing}"
          cd "$TARGET_DIR"
          echo "=== Deployment Verification ==="
          echo "Current directory: $(pwd)"
          echo "Files in root:"
          ls -la
          echo ""
          echo "Backups present:"
          ls -1d backup_* 2>/dev/null || echo "(none yet)"
          echo "backup_latest -> $(readlink -f backup_latest 2>/dev/null || echo 'n/a')"
          echo ""
          echo "Build info:"
          if [ -f "index.html" ]; then
            echo "✓ index.html exists"
          else
            echo "✗ index.html missing"
          fi
          if [ -d "static" ]; then
            echo "✓ static directory exists"
            echo "Static files count: $(find static -type f | wc -l)"
          else
            echo "ℹ static directory not present (OK if not applicable)"
          fi
          if [ -d "admin" ]; then
            echo "✓ admin directory preserved"
          else
            echo "ℹ admin directory not present"
          fi
          echo "Total files deployed: $(find . -type f | wc -l)"
          echo "=== End Verification ==="
          REMOTE

  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Website Health Check
        run: |
          echo "Checking website health..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.WEBSITE_URL }}" || echo "000")
          echo "HTTP Response Code: $RESPONSE"
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✓ Website is accessible and responding correctly"
          else
            echo "✗ Website health check failed with code: $RESPONSE"
            exit 1
          fi
        env:
          WEBSITE_URL: ${{ env.WEBSITE_URL }}
